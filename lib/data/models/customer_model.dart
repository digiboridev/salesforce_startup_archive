import 'dart:convert';

import 'package:***REMOVED***/domain/entities/customer.dart';

class CustomerModel extends Customer {
  CustomerModel({
    required String customerSAPNumber,
    required String customerName,
    required String customerId,
    required String customerAddress,
    required num vat,
    required bool showPriceWithVAT,
    required String salesOrganization,
    required bool returnEnabled,
    required String plantCode,
    required String paymentMethod,
    required DateTime? nextDeliveryFrozen,
    required DateTime nextDelivery,
    required DateTime nextCutOff,
    required num minimumOrderAmountFrozen,
    required num? minimumOrderAmount,
    required num? maximumReturnItems,
    required num maximumLinesInOrder,
    required String industryKey,
    required bool hidePrices,
    required bool hasUnpaidInvoice,
    required bool forceMinimum,
    required bool financialExportEnabled,
    required num distributionType,
    required String cutOffTime,
    required List creditCards,
    required String customerGroup,
    required List customerLineItems,
    required String countryKey,
    required String country,
  }) : super(
          customerSAPNumber: customerSAPNumber,
          customerName: customerName,
          customerId: customerId,
          customerAddress: customerAddress,
          vat: vat,
          showPriceWithVAT: showPriceWithVAT,
          salesOrganization: salesOrganization,
          returnEnabled: returnEnabled,
          plantCode: plantCode,
          paymentMethod: paymentMethod,
          nextDeliveryFrozen: nextDeliveryFrozen,
          nextDelivery: nextDelivery,
          nextCutOff: nextCutOff,
          minimumOrderAmountFrozen: minimumOrderAmountFrozen,
          minimumOrderAmount: minimumOrderAmount,
          maximumReturnItems: maximumReturnItems,
          maximumLinesInOrder: maximumLinesInOrder,
          industryKey: industryKey,
          hidePrices: hidePrices,
          hasUnpaidInvoice: hasUnpaidInvoice,
          forceMinimum: forceMinimum,
          financialExportEnabled: financialExportEnabled,
          distributionType: distributionType,
          cutOffTime: cutOffTime,
          creditCards: creditCards,
          customerGroup: customerGroup,
          customerLineItems: customerLineItems,
          countryKey: countryKey,
          country: country,
        );

  Map<String, dynamic> toMap() {
    return {
      'CustomerSAPNumber': customerSAPNumber,
      'CustomerName': customerName,
      'CustomerId': customerId,
      'CustomerAddress': customerAddress,
      'VAT': vat,
      'ShowPriceWithVAT': showPriceWithVAT,
      'SalesOrganization': salesOrganization,
      'ReturnEnabled': returnEnabled,
      'PlantCode': plantCode,
      'PaymentMethod': paymentMethod,
      'NextDeliveryFrozen': nextDeliveryFrozen.toString(),
      'NextDelivery': nextDelivery.toString(),
      'NextCutOff': nextCutOff.toString(),
      'MinimumOrderAmountFrozen': minimumOrderAmountFrozen,
      'MinimumOrderAmount': minimumOrderAmount,
      'MaximumReturnItems': maximumReturnItems,
      'MaximumLinesInOrder': maximumLinesInOrder,
      'IndustryKey': industryKey,
      'HidePrices': hidePrices,
      'HasUnpaidInvoice': hasUnpaidInvoice,
      'ForceMinimum': forceMinimum,
      'FinancialExportEnabled': financialExportEnabled,
      'DistributionType': distributionType,
      'CutOffTime': cutOffTime,
      'CreditCards': creditCards,
      'CustomerGroup': customerGroup,
      'CustomerLineItems': customerLineItems,
      'CountryKey': countryKey,
      'Country': country,
    };
  }

  factory CustomerModel.fromMap(Map<String, dynamic> map) {
    return CustomerModel(
      customerSAPNumber: map['CustomerSAPNumber'],
      customerName: map['CustomerName'],
      customerId: map['CustomerId'],
      customerAddress: map['CustomerAddress'],
      vat: map['VAT'],
      showPriceWithVAT: map['ShowPriceWithVAT'],
      salesOrganization: map['SalesOrganization'],
      returnEnabled: map['ReturnEnabled'],
      plantCode: map['PlantCode'],
      paymentMethod: map['PaymentMethod'],
      nextDeliveryFrozen: map['NextDeliveryFrozen'] != null
          ? map['NextDeliveryFrozen'] != 'null'
              ? DateTime.parse(map['NextDeliveryFrozen'])
              : null
          : null,
      nextDelivery: DateTime.parse(map['NextDelivery']),
      nextCutOff: DateTime.parse(map['NextCutOff']),
      minimumOrderAmountFrozen: map['MinimumOrderAmountFrozen'],
      minimumOrderAmount: map['MinimumOrderAmount'],
      maximumReturnItems:
          map['MaximumReturnItems'] is num ? map['MaximumReturnItems'] : null,
      maximumLinesInOrder: map['MaximumLinesInOrder'],
      industryKey: map['IndustryKey'],
      hidePrices: map['HidePrices'],
      hasUnpaidInvoice: map['HasUnpaidInvoice'],
      forceMinimum: map['ForceMinimum'],
      financialExportEnabled: map['FinancialExportEnabled'],
      distributionType: map['DistributionType'],
      cutOffTime: map['CutOffTime'],
      creditCards: List.from(map['CreditCards'] ?? const []),
      customerGroup: map['CustomerGroup'],
      customerLineItems: List.from(map['CustomerLineItems'] ?? const []),
      countryKey: map['CountryKey'],
      country: map['Country'],
    );
  }

  factory CustomerModel.fromEntity(Customer customer) {
    return CustomerModel(
      customerSAPNumber: customer.customerSAPNumber,
      customerName: customer.customerName,
      customerId: customer.customerId,
      customerAddress: customer.customerAddress,
      vat: customer.vat,
      showPriceWithVAT: customer.showPriceWithVAT,
      salesOrganization: customer.salesOrganization,
      returnEnabled: customer.returnEnabled,
      plantCode: customer.plantCode,
      paymentMethod: customer.paymentMethod,
      nextDeliveryFrozen: customer.nextDeliveryFrozen,
      nextDelivery: customer.nextDelivery,
      nextCutOff: customer.nextCutOff,
      minimumOrderAmountFrozen: customer.minimumOrderAmountFrozen,
      minimumOrderAmount: customer.minimumOrderAmount,
      maximumReturnItems: customer.maximumReturnItems,
      maximumLinesInOrder: customer.maximumLinesInOrder,
      industryKey: customer.industryKey,
      hidePrices: customer.hidePrices,
      hasUnpaidInvoice: customer.hasUnpaidInvoice,
      forceMinimum: customer.forceMinimum,
      financialExportEnabled: customer.financialExportEnabled,
      distributionType: customer.distributionType,
      cutOffTime: customer.cutOffTime,
      creditCards: customer.creditCards,
      customerGroup: customer.customerGroup,
      customerLineItems: customer.customerLineItems,
      countryKey: customer.countryKey,
      country: customer.country,
    );
  }

  String toJson() => json.encode(toMap());

  factory CustomerModel.fromJson(String source) =>
      CustomerModel.fromMap(json.decode(source));
}
